@baseUrl = http://localhost:4006
@urlPath = api/v1/order

### Variables for testing
@testOrderId = 60d5ecb54e0ff2001c8b4567
@testBuyerAddress = 0x742d35cc6634c0532925a3b8d76f4e21c0532925
@testSellerAddress = 0x8ba1f109551bD432803012645Hac136c123456789

###
# TEST 1: Create crypto order via Order Service
POST {{baseUrl}}/{{urlPath}}/crypto
Content-Type: application/json
Accept: application/json

{
  "offer": {
    "gigTitle": "I will create a modern website with crypto payment",
    "price": 100,
    "description": "Complete website development with modern design",
    "deliveryInDays": 7,
    "accepted": true,
    "cancelled": false
  },
  "gigId": "60d5ecb54e0ff2001c8b4560",
  "sellerId": "60d5ecb54e0ff2001c8b4561",
  "sellerUsername": "cryptoseller",
  "sellerImage": "https://example.com/seller.jpg",
  "sellerEmail": "seller@crypto.com",
  "gigCoverImage": "https://example.com/gig.jpg",
  "gigMainTitle": "Crypto Website Development",
  "gigBasicTitle": "Basic crypto website",
  "gigBasicDescription": "A modern website with crypto payment integration",
  "buyerId": "60d5ecb54e0ff2001c8b4562",
  "buyerUsername": "cryptobuyer",
  "buyerEmail": "buyer@crypto.com",
  "buyerImage": "https://example.com/buyer.jpg",
  "orderId": "{{testOrderId}}",
  "quantity": 1,
  "price": 100,
  "serviceFee": 5,
  "requirements": "Please integrate MetaMask and support ETH payments",
  "cryptoPayment": {
    "tokenAddress": "0x0000000000000000000000000000000000000000",
    "tokenSymbol": "ETH",
    "buyerWallet": "{{testBuyerAddress}}",
    "sellerWallet": "{{testSellerAddress}}",
    "chainId": 1
  }
}

###
# TEST 2: Confirm crypto payment
PUT {{baseUrl}}/{{urlPath}}/crypto/{{testOrderId}}/confirm-payment
Content-Type: application/json
Accept: application/json

{
  "transactionHash": "0xa1b2c3d4e5f6789012345678901234567890abcdef123456789012345678901234",
  "blockNumber": 18756432
}

###
# TEST 3: Mark crypto order as delivered
PUT {{baseUrl}}/{{urlPath}}/crypto/{{testOrderId}}/delivered
Content-Type: application/json
Accept: application/json

{
  "deliveryNote": "Crypto website completed with MetaMask integration",
  "deliveredWork": [
    {
      "message": "Website completed with crypto payment functionality",
      "file": "https://example.com/delivered-files/website.zip",
      "fileType": "application/zip",
      "fileSize": "15MB",
      "fileName": "crypto-website.zip"
    }
  ]
}

###
# TEST 4: Complete crypto order (buyer approval)
PUT {{baseUrl}}/{{urlPath}}/crypto/{{testOrderId}}/complete
Content-Type: application/json
Accept: application/json

{}

###
# TEST 5: Cancel crypto order
PUT {{baseUrl}}/{{urlPath}}/crypto/{{testOrderId}}/cancel
Content-Type: application/json
Accept: application/json

{
  "reason": "Testing crypto order cancellation flow"
}

###
# TEST 6: Get order by ID (should show crypto fields)
GET {{baseUrl}}/{{urlPath}}/{{testOrderId}}
Content-Type: application/json
Accept: application/json

###
# TEST 7: Get buyer orders (should include crypto orders)
GET {{baseUrl}}/{{urlPath}}/buyer/60d5ecb54e0ff2001c8b4562
Content-Type: application/json
Accept: application/json

###
# TEST 8: Get seller orders (should include crypto orders)
GET {{baseUrl}}/{{urlPath}}/seller/60d5ecb54e0ff2001c8b4561
Content-Type: application/json
Accept: application/json 